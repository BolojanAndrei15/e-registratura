generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Audit and backup logging
model AuditLog {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tableName   String
  primaryKey  String
  action      ActionType
  userId      String?    @db.Uuid
  oldData     Json?
  newData     Json?
  severity    Severity   @default(INFO)
  message     String     @default("")
  diffDetails Json?
  ipAddress   String?
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  User        User?      @relation(fields: [userId], references: [id])

  @@index([tableName])
  @@index([createdAt])
  @@index([userId])
  @@index([ipAddress])
}

/// Backup logs
model BackupLog {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filePath     String
  status       BackupStatus
  errorMessage String?
  createdAt    DateTime     @default(now()) @db.Timestamp(6)

  @@index([createdAt])
}

/// Departments
model Department {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String         @unique
  description         String?
  createdAt           DateTime       @default(now()) @db.Timestamp(6)
  updatedAt           DateTime       @updatedAt
  Register            Register[]
  registrationRecords Registration[]
  users               User[]
}

/// Permissions & roles
model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Role {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @unique
  color           String           @default("#6366f1")
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  rolePermissions RolePermission[]
  users           User[]
}

/// Register types & registers
model RegisterType {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique
  registers Register[]
}

model Register {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  year           Int
  minNumber      Int?
  maxNumber      Int?
  departmentId   String         @db.Uuid
  registerTypeId String         @db.Uuid
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  updatedAt      DateTime       @updatedAt
  Department     Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  RegisterType   RegisterType   @relation(fields: [registerTypeId], references: [id])
  records        Registration[]

  @@unique([name, departmentId, year])
  @@index([year])
}

/// Registration entries
model Registration {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registerId       String         @db.Uuid
  registrationNo   Int?
  createdAt        DateTime       @default(now()) @db.Timestamp(6)
  departmentId     String?        @db.Uuid
  registrantId     String?        @db.Uuid
  handlerId        String?        @db.Uuid
  status           RecordStatus   @default(PENDING)
  DocumentMetadata Document[]     @relation("RecordDocuments")
  Notification     Notification[]
  Department       Department?    @relation(fields: [departmentId], references: [id])
  Handler          User?          @relation("HandledRecords", fields: [handlerId], references: [id])
  Register         Register       @relation(fields: [registerId], references: [id], onDelete: Cascade)
  Registrant       User?          @relation("RegisteredRecords", fields: [registrantId], references: [id])

  @@unique([registerId, registrationNo])
  @@index([status])
}

/// Document metadata distinct table
model Document {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registrationId String           @db.Uuid
  fileUrl        String
  type           DocumentTypeEnum
  status         DocumentStatus   @default(DRAFT)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt
  summary        String?
  isDeleted      Boolean          @default(false)
  deletedAt      DateTime?        @db.Timestamp(6)
  Registration   Registration     @relation("RecordDocuments", fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([isDeleted])
}

/// User model with GDPR soft-delete
model User {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String         @unique
  passwordHash      String
  name              String
  departmentId      String?        @db.Uuid
  roleId            String?        @db.Uuid
  createdAt         DateTime       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime       @updatedAt
  isDeleted         Boolean        @default(false)
  deletedAt         DateTime?      @db.Timestamp(6)
  image             String?        @default("https://github.com/shadcn.png")
  auditLogs         AuditLog[]
  loginAttempts     LoginAttempt[]
  notifications     Notification[]
  HandledRecords    Registration[] @relation("HandledRecords")
  RegisteredRecords Registration[] @relation("RegisteredRecords")
  Department        Department?    @relation(fields: [departmentId], references: [id])
  Role              Role?          @relation(fields: [roleId], references: [id])

  @@index([isDeleted])
}

/// Authentication attempts
model LoginAttempt {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  email     String?
  ipAddress String
  success   Boolean
  timestamp DateTime @default(now()) @db.Timestamp(6)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
}

/// Notifications
model Notification {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registrationId String             @db.Uuid
  recipientId    String             @db.Uuid
  message        String
  status         NotificationStatus @default(UNASSIGNED)
  isRead         Boolean            @default(false)
  createdAt      DateTime           @default(now()) @db.Timestamp(6)
  Recipient      User               @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  Registration   Registration       @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([recipientId, status])
}

/// Series configuration
model SeriesConfig {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  current     Int      @default(1)
  description String?
  updatedAt   DateTime @updatedAt
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum Severity {
  DEBUG
  INFO
  WARN
  ERROR
}

enum BackupStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RecordStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum DocumentTypeEnum {
  INVOICE
  REPORT
  MEMO
  CONTRACT
  OTHER
}

enum DocumentStatus {
  DRAFT
  FINAL
  ARCHIVED
}

enum NotificationStatus {
  UNASSIGNED
  SENT
  FAILED
}
